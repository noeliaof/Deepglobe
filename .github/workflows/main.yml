name: CI/CD

on:
  push:
    branches:
      - main

jobs:

  build-and-push:
    runs-on: ubuntu-latest
    
    steps:

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Checkout code
      uses: actions/checkout@v3
      with:
        lfs: true

    - name: Checkout LFS objects
      run: git lfs checkout
    
    - name: debug
      run: ls -lR

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 769744325574.dkr.ecr.us-east-1.amazonaws.com

    - name: Build and push Docker image
      run: |
        # CURRENT_DATETIME=$(date +"%Y%m%d%H%M")
        cd deploy_fastapi/streamlit && docker build -t 769744325574.dkr.ecr.us-east-1.amazonaws.com/streamlit:latest .
        docker push 769744325574.dkr.ecr.us-east-1.amazonaws.com/streamlit:latest
        cd ../fastapi && docker build -t 769744325574.dkr.ecr.us-east-1.amazonaws.com/fastapi:latest .
        docker push 769744325574.dkr.ecr.us-east-1.amazonaws.com/fastapi:latest

  deploy-to-ec2:
    runs-on: ubuntu-latest

    needs: build-and-push

    steps:

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Get EC2 credentials
      run: |
        aws ec2 describe-key-pairs --filters Name=key-name,Values=key-pair-segment --query KeyPairs\[\*\].KeyPairId --output text
        aws ssm get-parameter --name /ec2/keypair/key-07149276c5d49978c --with-decryption --query Parameter.Value --output text > new-key-pair.pem
        chmod 0400 new-key-pair.pem

    - name: Get EC2 public DNS
      run: |
        echo "PUBLIC_DNS=$(aws ec2 describe-instances --filters 'Name=tag:Name,Values=Deepglobe' --query 'Reservations[].Instances[].PublicDnsName[]' --output text | tr -d '[:space:]')" >> $GITHUB_ENV

    - name: Config and deploy to EC2
      run: |
        scp -i new-key-pair.pem -o 'StrictHostKeyChecking no' deploy_fastapi/docker-compose.yml ubuntu@${{ env.PUBLIC_DNS }}:/home/ubuntu
        ssh -i new-key-pair.pem ubuntu@${{ env.PUBLIC_DNS }} 'mkdir -p /home/ubuntu/.aws'
        ssh -i new-key-pair.pem ubuntu@${{ env.PUBLIC_DNS }} << 'EOC'
        cat << EOF > /home/ubuntu/.aws/credentials
        [default]
        aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        EOC
        ssh -i new-key-pair.pem ubuntu@${{ env.PUBLIC_DNS }} << 'EOC'
        cat << EOF > /home/ubuntu/.aws/config
        [default]
        region = us-east-1
        EOC

        # startup
        ssh -i new-key-pair.pem ubuntu@${{ env.PUBLIC_DNS }} \
          'aws ecr get-login-password | sudo docker login --username AWS --password-stdin 769744325574.dkr.ecr.us-east-1.amazonaws.com && sudo docker compose up'

